{
  "name": "grow-fresh-local-food",
  "private": true,
  "version": "1.0.0",
  "description": "Grow Fresh Local Food Restaurant Operating System",
  "workspaces": [
    "client",
    "server",
    "shared"
  ],
  "scripts": {
    "start": "cd server && npm start",
    "dev": "NODE_OPTIONS='--max-old-space-size=4096' concurrently --kill-others-on-fail \"npm run dev:server\" \"npm run dev:client\"",
    "dev:supabase": "./scripts/dev-with-supabase.sh",
    "dev:streaming": "ENABLE_REALTIME_STREAMING=true npm run dev",
    "dev:server": "cd server && npm run dev",
    "dev:client": "cd client && npm run dev",
    "install:all": "npm install && cd server && npm install && cd ../client && npm install",
    "build": "NODE_OPTIONS='--max-old-space-size=4096' npm run build:render",
    "build:full": "npm run build:client && npm run build:server",
    "build:render": "cd server && npm run build",
    "build:client": "NODE_OPTIONS='--max-old-space-size=4096' cd client && npm run build",
    "build:server": "NODE_OPTIONS='--max-old-space-size=3072' cd server && npm run build",
    "test": "NODE_OPTIONS='--max-old-space-size=4096 --expose-gc' npm run test:client && npm run test:server",
    "test:client": "NODE_OPTIONS='--max-old-space-size=4096 --expose-gc' cd client && npm test",
    "test:server": "NODE_OPTIONS='--max-old-space-size=4096 --expose-gc' cd server && npm test",
    "test:ci": "NODE_OPTIONS='--max-old-space-size=4096 --expose-gc' VITEST_COVERAGE=false npm run test:client && npm run test:server",
    "test:watch": "NODE_OPTIONS='--max-old-space-size=4096 --expose-gc' cd client && npm run test:watch",
    "test:debug": "NODE_OPTIONS='--max-old-space-size=4096 --expose-gc --inspect' cd client && npm test",
    "test:coverage": "NODE_OPTIONS='--max-old-space-size=4096' cd client && npm run test:coverage",
    "test:e2e": "concurrently -k \"NODE_ENV=test npm run dev\" \"wait-on tcp:3001 && npx playwright test tests/e2e/**\"",
    "test:affected": "nx affected:test",
    "clean": "rm -rf node_modules/.vite client/dist server/dist",
    "check:integration": "tsx scripts/integration-check.ts",
    "lint": "eslint --ext .ts,.tsx .",
    "lint:fix": "eslint --ext .ts,.tsx . --fix",
    "typecheck": "tsc --build tsconfig.all.json",
    "typecheck:staged": "tsc --noEmit",
    "verify:ports": "! grep -r --include='*.ts' --include='*.tsx' --include='*.js' --include='*.jsx' --include='*.md' --exclude-dir=node_modules --exclude-dir=dist --exclude-dir=build '3002\\|AI_GATEWAY' client/ server/ || (echo 'Error: Found forbidden port 3002 or AI_GATEWAY references!' && exit 1)",
    "diagram:render": "node scripts/diagram-ci.js",
    "db:push": "supabase db push",
    "db:reset": "supabase db reset",
    "db:migration:new": "supabase migration new",
    "db:status": "cd server && npm run db:check",
    "analyze": "tsx scripts/gen-code-analysis.ts",
    "analyze:bundle": "tsx scripts/analyze-bundle.ts",
    "docs:generate": "tsx scripts/generate-docs.ts",
    "dev:setup": "./scripts/dev-setup.sh",
    "db:seed": "tsx scripts/seed-database.ts",
    "test:enhanced": "npx playwright test",
    "test:visual": "npx playwright test --project=visual-regression",
    "test:a11y": "npx playwright test --project=accessibility",
    "test:api": "npx playwright test --project=api",
    "test:performance": "npx playwright test --project=performance",
    "voice:smoke": "curl -s http://localhost:3001/api/v1/ai/voice/handshake | jq .",
    "memory:check": "ps aux | grep -E 'node|vite' | awk '{sum+=$6} END {printf \"Memory: %.0f MB\\n\", sum/1024}'",
    "clean:all": "rm -rf node_modules client/node_modules server/node_modules",
    "reset": "pkill -f vite 2>/dev/null || true; npm run clean"
  },
  "devDependencies": {
    "@apidevtools/swagger-parser": "^12.0.0",
    "@axe-core/playwright": "^4.10.2",
    "@babel/preset-env": "^7.28.0",
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@cyanheads/git-mcp-server": "^2.3.2",
    "@eslint/js": "^9.31.0",
    "@modelcontextprotocol/server-filesystem": "^2025.8.21",
    "@modelcontextprotocol/server-memory": "^2025.8.4",
    "@modelcontextprotocol/server-puppeteer": "^2025.5.12",
    "@modelcontextprotocol/server-sequential-thinking": "^2025.7.1",
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/instrumentation-express": "^0.52.0",
    "@opentelemetry/instrumentation-http": "^0.203.0",
    "@opentelemetry/sdk-node": "^0.203.0",
    "@playwright/experimental-ct-react": "^1.54.2",
    "@playwright/test": "^1.54.2",
    "@types/node": "^20.19.10",
    "@typescript-eslint/eslint-plugin": "^8.36.0",
    "@typescript-eslint/parser": "^8.36.0",
    "concurrently": "8.2.2",
    "cross-env": "^10.0.0",
    "dotenv": "^16.3.1",
    "eslint": "^9.31.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "husky": "^9.1.7",
    "lint-staged": "^16.1.5",
    "npm-run-all": "^4.1.5",
    "playwright-lighthouse": "^4.0.0",
    "supabase-mcp": "^1.5.0",
    "terser": "^5.43.1",
    "tsx": "^4.7.0",
    "wait-on": "^8.0.4",
    "web-vitals": "^5.1.0"
  },
  "keywords": [
    "restaurant",
    "pos",
    "voice-ordering",
    "kds",
    "grow-fresh"
  ],
  "author": "Macon AI Solutions",
  "license": "PROPRIETARY",
  "engines": {
    "node": ">=18.0.0"
  },
  "dependencies": {
    "@radix-ui/react-tooltip": "^1.2.8",
    "zod": "^3.25.76"
  }
}
