diff --git a/client/src/components/auth/DevAuthOverlay.tsx b/client/src/components/auth/DevAuthOverlay.tsx
index 2bc1208..a3bc30e 100644
--- a/client/src/components/auth/DevAuthOverlay.tsx
+++ b/client/src/components/auth/DevAuthOverlay.tsx
@@ -1,10 +1,11 @@
-import React, { useState } from 'react';
+import React, { useState, useEffect } from 'react';
 import { useAuth } from '@/contexts/auth.hooks';
 import { Button } from '@/components/ui/button';
 import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
 import { Badge } from '@/components/ui/badge';
-import { Users, ChefHat, Package, CreditCard, Settings } from 'lucide-react';
+import { Users, ChefHat, Package, CreditCard, Settings, Eye, EyeOff, Copy } from 'lucide-react';
 import { logger } from '@/services/logger';
+import { toast } from 'react-hot-toast';
 
 interface DemoRole {
   id: string;
@@ -12,6 +13,9 @@ interface DemoRole {
   description: string;
   icon: React.ReactNode;
   color: string;
+  email: string;
+  password: string;
+  pin?: string;
 }
 
 const demoRoles: DemoRole[] = [
@@ -20,64 +24,93 @@ const demoRoles: DemoRole[] = [
     name: 'Manager',
     description: 'Full restaurant operations access',
     icon: <Settings className="h-5 w-5" />,
-    color: '#2A4B5C'
+    color: '#2A4B5C',
+    email: 'manager@restaurant.com',
+    password: 'Demo123!',
+    pin: '1234'
   },
   {
     id: 'server', 
     name: 'Server',
     description: 'Order creation and payment processing',
     icon: <Users className="h-5 w-5" />,
-    color: '#4ECDC4'
+    color: '#4ECDC4',
+    email: 'server@restaurant.com',
+    password: 'Demo123!',
+    pin: '5678'
   },
   {
     id: 'kitchen',
     name: 'Kitchen',
     description: 'Kitchen display and order management',
     icon: <ChefHat className="h-5 w-5" />,
-    color: '#FF6B35'
+    color: '#FF6B35',
+    email: 'kitchen@restaurant.com',
+    password: 'Demo123!',
+    pin: '9012'
   },
   {
     id: 'expo',
     name: 'Expo',
     description: 'Order completion and expediting',
     icon: <Package className="h-5 w-5" />,
-    color: '#F4A460'
+    color: '#F4A460',
+    email: 'expo@restaurant.com',
+    password: 'Demo123!',
+    pin: '3456'
   },
   {
     id: 'cashier',
     name: 'Cashier', 
     description: 'Payment processing only',
     icon: <CreditCard className="h-5 w-5" />,
-    color: '#88B0A4'
+    color: '#88B0A4',
+    email: 'cashier@restaurant.com',
+    password: 'Demo123!',
+    pin: '7890'
   }
 ];
 
 export function DevAuthOverlay() {
-  const { loginAsDemo } = useAuth();
+  const { login, loginWithPin } = useAuth();
   const [isLoading, setIsLoading] = useState(false);
   const [selectedRole, setSelectedRole] = useState<string | null>(null);
+  const [showPasswords, setShowPasswords] = useState(false);
+  const [showPins, setShowPins] = useState(false);
 
-  // Only render in development with demo auth enabled
-  if (import.meta.env.PROD || import.meta.env.VITE_DEMO_AUTH !== '1') {
+  // Only render in development with demo panel explicitly enabled
+  if (import.meta.env.PROD || import.meta.env.VITE_DEMO_PANEL !== '1') {
     return null;
   }
 
-  const handleRoleSelect = async (role: string) => {
+  const handleRoleSelect = async (role: DemoRole, usePin: boolean = false) => {
     setIsLoading(true);
-    setSelectedRole(role);
+    setSelectedRole(role.id);
+    const restaurantId = '11111111-1111-1111-1111-111111111111';
     
     try {
-      await loginAsDemo(role);
-      logger.info(`Demo login successful as ${role}`);
+      if (usePin && role.pin) {
+        await loginWithPin(role.pin, restaurantId);
+        toast.success(`Logged in as ${role.name} using PIN`);
+      } else {
+        await login(role.email, role.password, restaurantId);
+        toast.success(`Logged in as ${role.name}`);
+      }
+      logger.info(`Demo login successful as ${role.name}`);
     } catch (error) {
-      logger.error(`Demo login failed for ${role}:`, error);
-      // Show error toast or message
+      logger.error(`Demo login failed for ${role.name}:`, error);
+      toast.error(`Login failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
     } finally {
       setIsLoading(false);
       setSelectedRole(null);
     }
   };
 
+  const copyToClipboard = (text: string, type: string) => {
+    navigator.clipboard.writeText(text);
+    toast.success(`${type} copied to clipboard`);
+  };
+
   return (
     <Card className="w-full max-w-2xl mx-auto mt-8 shadow-lg border-2 border-orange-200 bg-gradient-to-br from-orange-50 to-white">
       <CardHeader className="text-center">
@@ -95,40 +128,135 @@ export function DevAuthOverlay() {
         </CardDescription>
       </CardHeader>
       <CardContent>
-        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
+        <div className="mb-4 flex gap-4 justify-center">
+          <Button
+            variant="outline"
+            size="sm"
+            onClick={() => setShowPasswords(!showPasswords)}
+            className="gap-2"
+          >
+            {showPasswords ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
+            {showPasswords ? 'Hide' : 'Show'} Passwords
+          </Button>
+          <Button
+            variant="outline"
+            size="sm"
+            onClick={() => setShowPins(!showPins)}
+            className="gap-2"
+          >
+            {showPins ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
+            {showPins ? 'Hide' : 'Show'} PINs
+          </Button>
+        </div>
+        
+        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
           {demoRoles.map((role) => (
-            <Button
-              key={role.id}
-              onClick={() => handleRoleSelect(role.id)}
-              disabled={isLoading}
-              variant="outline"
-              className="h-auto flex flex-col items-center justify-center p-4 hover:shadow-md transition-all"
-              style={{
-                borderColor: role.color,
-                backgroundColor: isLoading && selectedRole === role.id ? role.color + '20' : 'transparent'
-              }}
-            >
-              <div 
-                className="p-2 rounded-lg mb-2"
-                style={{ backgroundColor: role.color + '20', color: role.color }}
-              >
-                {role.icon}
-              </div>
-              <span className="font-semibold">{role.name}</span>
-              <span className="text-xs text-muted-foreground text-center mt-1">
-                {role.description}
-              </span>
-              {isLoading && selectedRole === role.id && (
-                <div className="animate-spin rounded-full h-4 w-4 border-b-2 mt-2" 
-                     style={{ borderColor: role.color }} />
-              )}
-            </Button>
+            <Card key={role.id} className="border" style={{ borderColor: role.color + '40' }}>
+              <CardContent className="p-4">
+                <div className="flex items-start justify-between mb-3">
+                  <div className="flex items-center gap-2">
+                    <div 
+                      className="p-2 rounded-lg"
+                      style={{ backgroundColor: role.color + '20', color: role.color }}
+                    >
+                      {role.icon}
+                    </div>
+                    <div>
+                      <h3 className="font-semibold">{role.name}</h3>
+                      <p className="text-xs text-muted-foreground">{role.description}</p>
+                    </div>
+                  </div>
+                </div>
+                
+                <div className="space-y-2 mb-3">
+                  <div className="flex items-center justify-between text-sm">
+                    <span className="text-muted-foreground">Email:</span>
+                    <div className="flex items-center gap-1">
+                      <code className="bg-gray-100 px-2 py-0.5 rounded">{role.email}</code>
+                      <Button
+                        variant="ghost"
+                        size="sm"
+                        className="h-6 w-6 p-0"
+                        onClick={() => copyToClipboard(role.email, 'Email')}
+                      >
+                        <Copy className="h-3 w-3" />
+                      </Button>
+                    </div>
+                  </div>
+                  <div className="flex items-center justify-between text-sm">
+                    <span className="text-muted-foreground">Password:</span>
+                    <div className="flex items-center gap-1">
+                      <code className="bg-gray-100 px-2 py-0.5 rounded">
+                        {showPasswords ? role.password : '••••••••'}
+                      </code>
+                      <Button
+                        variant="ghost"
+                        size="sm"
+                        className="h-6 w-6 p-0"
+                        onClick={() => copyToClipboard(role.password, 'Password')}
+                      >
+                        <Copy className="h-3 w-3" />
+                      </Button>
+                    </div>
+                  </div>
+                  {role.pin && (
+                    <div className="flex items-center justify-between text-sm">
+                      <span className="text-muted-foreground">PIN:</span>
+                      <div className="flex items-center gap-1">
+                        <code className="bg-gray-100 px-2 py-0.5 rounded">
+                          {showPins ? role.pin : '••••'}
+                        </code>
+                        <Button
+                          variant="ghost"
+                          size="sm"
+                          className="h-6 w-6 p-0"
+                          onClick={() => copyToClipboard(role.pin, 'PIN')}
+                        >
+                          <Copy className="h-3 w-3" />
+                        </Button>
+                      </div>
+                    </div>
+                  )}
+                </div>
+                
+                <div className="grid grid-cols-2 gap-2">
+                  <Button
+                    onClick={() => handleRoleSelect(role, false)}
+                    disabled={isLoading}
+                    variant="default"
+                    size="sm"
+                    className="w-full"
+                  >
+                    {isLoading && selectedRole === role.id ? (
+                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
+                    ) : (
+                      'Login with Email'
+                    )}
+                  </Button>
+                  {role.pin && (
+                    <Button
+                      onClick={() => handleRoleSelect(role, true)}
+                      disabled={isLoading}
+                      variant="outline"
+                      size="sm"
+                      className="w-full"
+                    >
+                      {isLoading && selectedRole === role.id ? (
+                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-gray-600" />
+                      ) : (
+                        'Login with PIN'
+                      )}
+                    </Button>
+                  )}
+                </div>
+              </CardContent>
+            </Card>
           ))}
         </div>
         <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
           <p className="text-sm text-yellow-800">
-            <strong>Note:</strong> This demo mode is only available in development. 
-            These are pre-seeded test accounts with limited data access.
+            <strong>Friends & Family Panel:</strong> This panel is only visible in development mode with VITE_DEMO_PANEL=1. 
+            These are real Supabase accounts with test data. Click login buttons to authenticate using actual credentials.
           </p>
         </div>
       </CardContent>
