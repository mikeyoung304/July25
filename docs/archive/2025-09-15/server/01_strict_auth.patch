diff --git a/server/src/middleware/auth.ts b/server/src/middleware/auth.ts
index df9d87f..19325a3 100644
--- a/server/src/middleware/auth.ts
+++ b/server/src/middleware/auth.ts
@@ -33,27 +33,10 @@ export async function authenticate(
 
     const token = authHeader.substring(7);
     
-    // STRICT_AUTH mode - no bypasses allowed
-    const strictAuth = process.env['STRICT_AUTH'] === 'true';
-    
-    // In strict auth mode, never allow test tokens
-    if (strictAuth && token === 'test-token') {
-      logger.error('⛔ STRICT_AUTH enabled - test token rejected');
-      throw Unauthorized('Test tokens not allowed in strict auth mode');
-    }
-    
-    // Legacy test token support (will be removed)
-    // Only for backwards compatibility during migration
-    if (process.env['NODE_ENV'] === 'test' && token === 'test-token' && !strictAuth) {
-      logger.warn('⚠️ DEPRECATED: test-token usage detected. This will be removed soon.');
-      req.user = {
-        id: 'test-user-id',
-        email: 'test@example.com',
-        role: 'admin',
-        scopes: ['orders:create', 'orders:read', 'orders:write', 'payments:write', 'payments:read'],
-      };
-      req.restaurantId = req.headers['x-restaurant-id'] as string || config.restaurant.defaultId;
-      return next();
+    // NEVER accept test tokens - authentication is required
+    if (token === 'test-token') {
+      logger.error('⛔ Test token rejected - authentication required');
+      throw Unauthorized('Test tokens are not allowed. Please use proper authentication.');
     }
 
     // Verify JWT with proper signature validation
@@ -139,34 +122,16 @@ export async function verifyWebSocketAuth(
     const token = url.searchParams.get('token');
 
     if (!token) {
-      // In development, allow anonymous connections with warning
-      if (config.nodeEnv === 'development') {
-        logger.warn('⚠️ WebSocket: Anonymous connection (no token) - dev mode only');
-        return {
-          userId: 'anonymous',
-          restaurantId: config.restaurant.defaultId,
-        };
-      }
+      // No token provided - authentication required
+      logger.warn('WebSocket: No authentication token provided');
       return null;
     }
 
-    // STRICT_AUTH mode - no bypasses allowed
-    const strictAuth = process.env['STRICT_AUTH'] === 'true';
-    
-    // In strict auth mode, never allow test tokens
-    if (strictAuth && token === 'test-token') {
-      logger.error('⛔ WebSocket: STRICT_AUTH enabled - test token rejected');
+    // NEVER accept test tokens - authentication is required
+    if (token === 'test-token') {
+      logger.error('⛔ WebSocket: Test token rejected - authentication required');
       return null;
     }
-    
-    // Legacy test token support for tests only
-    if (process.env['NODE_ENV'] === 'test' && token === 'test-token' && !strictAuth) {
-      logger.warn('⚠️ WebSocket: DEPRECATED test-token usage');
-      return {
-        userId: 'test-user-id',
-        restaurantId: config.restaurant.defaultId,
-      };
-    }
 
     // Verify JWT with proper signature validation
     let decoded: any;
