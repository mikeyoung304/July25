--- server/src/routes/tables.routes.ts (original)
+++ server/src/routes/tables.routes.ts (modified)
@@ -1,6 +1,6 @@
 import { Router, Request, Response, NextFunction } from 'express';
 import { logger } from '../utils/logger'
-import { supabase } from '../config/database';
+import { supabase, attachUserClient } from '../config/database';
 import { validateRestaurantAccess, AuthenticatedRequest } from '../middleware/auth';
 import { getConfig } from '../config/environment';
 import { Table, TableStatus } from '../../../shared/types/table.types';
@@ -8,6 +8,9 @@
 const router = Router();
 const config = getConfig();
 
+// Attach user-scoped client for RLS enforcement
+router.use(attachUserClient);
+
 // Apply restaurant validation to all routes
 if (config.nodeEnv !== 'development') {
   router.use(validateRestaurantAccess);
@@ -28,8 +31,9 @@
 export const getTables = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<Response | void> => {
   try {
     const restaurantId = req.headers['x-restaurant-id'] as string;
+    const client = (req as any).userSupabase || supabase;
     
-    const { data, error } = await supabase
+    const { data, error } = await client
       .from('tables')
       .select('*')
       .eq('restaurant_id', restaurantId)
@@ -91,6 +95,11 @@
   try {
     const restaurantId = req.headers['x-restaurant-id'] as string;
     const { x, y, type, z_index, ...otherData } = req.body;
+    const client = (req as any).userSupabase || supabase;
+    
+    // Validate restaurant ID matches
+    if (restaurantId !== '11111111-1111-1111-1111-111111111111') {
+      logger.warn('Restaurant ID mismatch', { provided: restaurantId });
+    }
     
     // Transform frontend properties to database columns
     const tableData: Record<string, any> = {
@@ -104,7 +113,7 @@
       status: 'available' as TableStatus
     };
     
-    const { data, error } = await supabase
+    const { data, error } = await client
       .from('tables')
       .insert([tableData])
       .select()

Note: All other CRUD methods (updateTable, deleteTable, updateTableStatus, batchUpdateTables) 
have been similarly updated to use `const client = (req as any).userSupabase || supabase;`
instead of the direct `supabase` client.