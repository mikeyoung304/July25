diff --git a/client/src/services/http/httpClient.ts b/client/src/services/http/httpClient.ts
index 756d133..6120488 100644
--- a/client/src/services/http/httpClient.ts
+++ b/client/src/services/http/httpClient.ts
@@ -134,31 +134,23 @@ export class HttpClient extends SecureAPIClient {
           if (import.meta.env.DEV) {
             logger.info('🔐 Using Supabase session token for API request')
           }
-        } else if (import.meta.env.DEV) {
-          // Development-only test token fallback
-          headers.set('Authorization', 'Bearer test-token')
-          logger.info('🔧 Using test token (development only)')
         } else {
           console.warn('❌ No authentication available for API request')
         }
       } catch (error) {
         console.error('Failed to get auth session:', error)
-        // Development fallback only
-        if (import.meta.env.DEV) {
-          headers.set('Authorization', 'Bearer test-token')
-          logger.info('🔧 Using test token (auth session failed, dev mode)')
-        }
+        // No fallback - authentication is required
       }
     }
 
     // 2. Add x-restaurant-id header (per Luis's spec)
     if (!skipRestaurantId) {
-      let restaurantId = getCurrentRestaurantId()
+      const restaurantId = getCurrentRestaurantId()
       
-      // Fallback to demo restaurant ID if not set (for friends & family/demo mode)
+      // Restaurant ID is required for multi-tenant operations
       if (!restaurantId) {
-        restaurantId = '11111111-1111-1111-1111-111111111111'
-        logger.info('🏢 Using demo restaurant ID for API request')
+        logger.warn('⚠️ No restaurant ID available for API request')
+        throw new Error('Restaurant context is required for API requests')
       }
       
       headers.set('x-restaurant-id', restaurantId)
