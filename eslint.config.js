import js from '@eslint/js';
import tsPlugin from '@typescript-eslint/eslint-plugin';
import tsParser from '@typescript-eslint/parser';
import reactPlugin from 'eslint-plugin-react';
import reactHooksPlugin from 'eslint-plugin-react-hooks';

export default [
  {
    ignores: [
      'node_modules/**',
      'dist/**',
      'build/**',
      'coverage/**',
      '**/coverage/**',
      'client/coverage/**',
      'server/coverage/**',
      '*.config.js',
      '*.config.cjs',
      'scripts/**',
      'supabase/**',
      'client/node_modules/**',
      'server/node_modules/**',
      'client/dist/**',
      'server/dist/**',
      'client/public/ignition-animation/**',
      'tests/e2e/**',
      '*.spec.ts',
      '*.spec.js',
      '.next/**',
      'storybook-static/**',
      'docs/archive/**',
      'server/scripts/**',
    ],
  },
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    languageOptions: {
      parser: tsParser,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        ecmaFeatures: {
          jsx: true,
        },
      },
      globals: {
        console: 'readonly',
        process: 'readonly',
        Buffer: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        exports: 'writable',
        module: 'writable',
        require: 'readonly',
        global: 'readonly',
        globalThis: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        setImmediate: 'readonly',
        clearImmediate: 'readonly',
        NodeJS: 'readonly',
        fetch: 'readonly',
        URL: 'readonly',
        Express: 'readonly',
      },
    },
    plugins: {
      '@typescript-eslint': tsPlugin,
      'react': reactPlugin,
      'react-hooks': reactHooksPlugin,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...tsPlugin.configs.recommended.rules,
      
      // TypeScript
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      '@typescript-eslint/no-explicit-any': 'warn',
      '@typescript-eslint/no-unused-vars': ['warn', { 
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
      }],
      '@typescript-eslint/ban-ts-comment': ['error', {
        'ts-ignore': false,
        'ts-expect-error': 'allow-with-description',
      }],
      '@typescript-eslint/no-namespace': 'off',
      
      // React
      'react/react-in-jsx-scope': 'off',
      'react/prop-types': 'off',
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',
      
      // General
      'no-console': ['warn', { allow: ['warn', 'error'] }],
      'no-debugger': 'warn',
      'no-unused-vars': 'off', // Use TypeScript's no-unused-vars instead
    },
    settings: {
      react: {
        version: 'detect',
      },
    },
  },
  {
    files: ['**/*.{js,cjs}'],
    languageOptions: {
      sourceType: 'commonjs',
    },
    rules: {
      '@typescript-eslint/no-var-requires': 'off',
    },
  },
  {
    files: ['client/**/*.{js,jsx,ts,tsx}'],
    languageOptions: {
      globals: {
        window: 'readonly',
        document: 'readonly',
        navigator: 'readonly',
        fetch: 'readonly',
        HTMLElement: 'readonly',
        HTMLInputElement: 'readonly',
        HTMLTextAreaElement: 'readonly',
        HTMLSelectElement: 'readonly',
        HTMLButtonElement: 'readonly',
        HTMLAnchorElement: 'readonly',
        HTMLImageElement: 'readonly',
        HTMLDivElement: 'readonly',
        HTMLParagraphElement: 'readonly',
        HTMLHeadingElement: 'readonly',
        HTMLLabelElement: 'readonly',
        HTMLCanvasElement: 'readonly',
        CanvasRenderingContext2D: 'readonly',
        HTMLSpanElement: 'readonly',
        HTMLFormElement: 'readonly',
        HTMLAllCollection: 'readonly',
        File: 'readonly',
        Blob: 'readonly',
        FileReader: 'readonly',
        FormData: 'readonly',
        URLSearchParams: 'readonly',
        WebSocket: 'readonly',
        MediaRecorder: 'readonly',
        MediaStream: 'readonly',
        MediaStreamTrack: 'readonly',
        AudioContext: 'readonly',
        AudioWorkletNode: 'readonly',
        MouseEvent: 'readonly',
        KeyboardEvent: 'readonly',
        FocusEvent: 'readonly',
        Node: 'readonly',
        Element: 'readonly',
        localStorage: 'readonly',
        performance: 'readonly',
        Headers: 'readonly',
        URL: 'readonly',
        requestAnimationFrame: 'readonly',
        React: 'readonly',
        JSX: 'readonly',
        Range: 'readonly',
        Audio: 'readonly',
        ImageData: 'readonly',
        HTMLVideoElement: 'readonly',
        HTMLMediaElement: 'readonly',
        Image: 'readonly',
        Notification: 'readonly',
        EventSource: 'readonly',
        SpeechSynthesis: 'readonly',
        SpeechSynthesisUtterance: 'readonly',
        speechSynthesis: 'readonly',
        MutationObserver: 'readonly',
        IntersectionObserver: 'readonly',
        ResizeObserver: 'readonly',
        PerformanceObserver: 'readonly',
        TextEncoder: 'readonly',
        TextDecoder: 'readonly',
        crypto: 'readonly',
        btoa: 'readonly',
        atob: 'readonly',
        DOMRect: 'readonly',
        SVGElement: 'readonly',
        Event: 'readonly',
        CustomEvent: 'readonly',
        MessageEvent: 'readonly',
        CloseEvent: 'readonly',
        ErrorEvent: 'readonly',
        ProgressEvent: 'readonly',
        AnimationFrameProvider: 'readonly',
        screen: 'readonly',
        history: 'readonly',
        location: 'readonly',
        PointerEvent: 'readonly',
        TouchEvent: 'readonly',
        WheelEvent: 'readonly',
        CompositionEvent: 'readonly',
        ClipboardEvent: 'readonly',
        InputEvent: 'readonly',
        Response: 'readonly',
        Request: 'readonly',
        AbortController: 'readonly',
        AbortSignal: 'readonly',
        Performance: 'readonly',
        queueMicrotask: 'readonly',
        sessionStorage: 'readonly',
        CanvasGradient: 'readonly',
        CanvasPattern: 'readonly',
        Path2D: 'readonly',
        PermissionName: 'readonly',
        PermissionStatus: 'readonly',
        Permissions: 'readonly',
        DOMException: 'readonly',
        alert: 'readonly',
        confirm: 'readonly',
        prompt: 'readonly',
        OscillatorType: 'readonly',
        OscillatorNode: 'readonly',
        GainNode: 'readonly',
        AudioNode: 'readonly',
        AudioParam: 'readonly',
        AudioDestinationNode: 'readonly',
        AnalyserNode: 'readonly',
        AudioBuffer: 'readonly',
        AudioBufferSourceNode: 'readonly',
        AudioListener: 'readonly',
        AudioProcessingEvent: 'readonly',
        BiquadFilterNode: 'readonly',
        ChannelMergerNode: 'readonly',
        ChannelSplitterNode: 'readonly',
        ConvolverNode: 'readonly',
        DelayNode: 'readonly',
        DynamicsCompressorNode: 'readonly',
        MediaElementAudioSourceNode: 'readonly',
        MediaStreamAudioDestinationNode: 'readonly',
        MediaStreamAudioSourceNode: 'readonly',
        PannerNode: 'readonly',
        PeriodicWave: 'readonly',
        ScriptProcessorNode: 'readonly',
        StereoPannerNode: 'readonly',
        WaveShaperNode: 'readonly',
        AudioScheduledSourceNode: 'readonly',
        BaseAudioContext: 'readonly',
        OfflineAudioContext: 'readonly',
        OfflineAudioCompletionEvent: 'readonly',
        RequestInit: 'readonly',
        RequestInfo: 'readonly',
        RequestMode: 'readonly',
        RequestCredentials: 'readonly',
        RequestCache: 'readonly',
        RequestRedirect: 'readonly',
        ResponseInit: 'readonly',
        ResponseType: 'readonly',
        BodyInit: 'readonly',
        HeadersInit: 'readonly',
      },
    },
  },
  {
    files: ['**/*.test.{ts,tsx}', '**/*.spec.{ts,tsx}', '**/test/**/*.{ts,tsx}', '**/tests/**/*.{ts,tsx}', '**/__mocks__/**/*.{ts,tsx}'],
    languageOptions: {
      globals: {
        describe: 'readonly',
        it: 'readonly',
        expect: 'readonly',
        beforeEach: 'readonly',
        afterEach: 'readonly',
        beforeAll: 'readonly',
        afterAll: 'readonly',
        jest: 'readonly',
        vi: 'readonly',
        test: 'readonly',
        page: 'readonly',
      },
    },
  },
  {
    files: ['server/**/*.{js,ts}'],
    languageOptions: {
      globals: {
        Express: 'readonly',
      },
    },
  },
];