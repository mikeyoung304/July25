name: Playwright Smoke Tests

on:
  pull_request:
    paths:
      - 'client/**'
      - '.github/workflows/playwright-smoke.yml'

jobs:
  smoke-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: CI Environment Diagnostics
        run: |
          chmod +x ./scripts/ci-echo-env.sh
          ./scripts/ci-echo-env.sh
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: Install Vercel CLI
        run: npm i -g vercel@latest
      
      - name: Deploy to Vercel Preview
        id: vercel
        uses: vercel/action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./client
      
      - name: Extract and Verify Preview URL
        id: preview
        run: |
          echo "::group::Vercel Deployment Info"
          if [ -z "${{ steps.vercel.outputs.preview-url }}" ]; then
            echo "WARNING: No preview URL from action output, attempting to query Vercel API..."
            
            # Query Vercel API for deployment by SHA
            DEPLOYMENT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
              "https://api.vercel.com/v6/deployments?projectId=${{ secrets.VERCEL_PROJECT_ID }}&teamId=${{ secrets.VERCEL_ORG_ID }}&meta-githubCommitSha=${{ github.sha }}&limit=1" \
              | jq -r '.deployments[0].url // empty')
            
            if [ -z "$DEPLOYMENT_URL" ]; then
              echo "ERROR: Could not find deployment for SHA ${{ github.sha }}"
              exit 1
            fi
            
            PREVIEW_URL="https://$DEPLOYMENT_URL"
          else
            PREVIEW_URL="${{ steps.vercel.outputs.preview-url }}"
          fi
          
          echo "preview-url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "::notice title=Preview URL::$PREVIEW_URL"
          echo "::endgroup::"
          
          # Wait for deployment to be ready
          echo "Waiting for deployment to be ready..."
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" "$PREVIEW_URL" | grep -q "200\|304"; then
              echo "Deployment is ready!"
              break
            fi
            echo "Attempt $i/30: Deployment not ready yet..."
            sleep 10
          done
      
      - name: Check Backend Health (Non-blocking)
        run: |
          RENDER_API_BASE="${{ secrets.RENDER_API_BASE || 'https://july25.onrender.com' }}"
          echo "::group::Backend Health Check"
          echo "Checking backend health at: $RENDER_API_BASE/api/v1/ai/health"
          
          HEALTH_RESPONSE=$(curl -s -w "\n%{http_code}" "$RENDER_API_BASE/api/v1/ai/health" || echo "CURL_FAILED")
          HTTP_CODE=$(echo "$HEALTH_RESPONSE" | tail -n1)
          BODY=$(echo "$HEALTH_RESPONSE" | head -n-1)
          
          if [ "$HTTP_CODE" = "200" ] || echo "$BODY" | grep -q '"ok":\s*true'; then
            echo "✅ Backend is healthy: $BODY"
          else
            echo "⚠️ Backend health check failed (non-blocking)"
            echo "HTTP Code: $HTTP_CODE"
            echo "Response: $BODY"
            echo "Tests will continue with potential mock fallbacks"
          fi
          echo "::endgroup::"
      
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: ./client
        run: npx playwright install --with-deps chromium
      
      - name: Run Playwright smoke tests
        working-directory: ./client
        env:
          BASE_URL: ${{ steps.preview.outputs.preview-url }}
        run: |
          echo "Running smoke tests against: $BASE_URL"
          npx playwright test --project=chromium --grep @smoke --reporter=line
      
      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            client/test-results/
            client/playwright-report/
          retention-days: 7