name: Documentation Quality Check

on:
  push:
    branches: [main, develop]
    paths:
      - 'docs/**/*.md'
      - '.env.example'
      - '.github/workflows/docs-check.yml'
  pull_request:
    paths:
      - 'docs/**/*.md'
      - '.env.example'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  docs-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ================================================================
      # 1. LINK VALIDATION - Check for broken internal markdown links
      # ================================================================
      - name: Validate internal links
        run: |
          echo "🔗 Checking internal markdown links..."
          BROKEN_LINKS=0

          find docs -name "*.md" -type f 2>/dev/null | while read file; do
            grep -oE '\]\([^)]+\)' "$file" 2>/dev/null | sed 's/](\(.*\))/\1/' | while read link; do
              # Skip external URLs, mailto, and anchor-only links
              [[ "$link" =~ ^https?:// ]] && continue
              [[ "$link" =~ ^mailto: ]] && continue
              [[ "$link" =~ ^# ]] && continue

              # Extract file path (remove anchor)
              file_path="${link%%#*}"
              [[ -z "$file_path" ]] && continue

              # Resolve path relative to file location
              dir=$(dirname "$file")
              if [[ "$file_path" =~ ^/ ]]; then
                target=".$file_path"
              else
                target="$dir/$file_path"
              fi

              # Normalize and check existence
              if [ ! -f "$target" ] && [ ! -d "$target" ]; then
                echo "❌ Broken link in $file: $link"
                BROKEN_LINKS=$((BROKEN_LINKS + 1))
              fi
            done
          done

          if [ $BROKEN_LINKS -gt 0 ]; then
            echo "::error::Found $BROKEN_LINKS broken link(s)"
            exit 1
          fi
          echo "✅ All internal links valid"

      # ================================================================
      # 2. DOCUMENTATION STANDARDS - Structure and completeness
      # ================================================================
      - name: Check documentation standards
        run: |
          echo "📚 Checking documentation standards..."
          ISSUES=0

          # Verify Diátaxis structure exists
          for dir in tutorials how-to reference explanation; do
            if [ ! -d "docs/$dir" ]; then
              echo "::error::Missing Diátaxis directory: docs/$dir"
              ISSUES=$((ISSUES + 1))
            fi
          done

          # Check for required core files
          if [ ! -f "docs/README.md" ]; then
            echo "::warning::Missing docs/README.md"
          fi
          if [ ! -f "docs/tutorials/GETTING_STARTED.md" ]; then
            echo "::warning::Missing getting started guide"
          fi

          # Count files missing Last Updated
          MISSING_DATES=$(find docs -name "*.md" -type f -not -path "docs/archive/*" 2>/dev/null | \
            while read f; do grep -L "Last Updated" "$f" 2>/dev/null; done | wc -l)

          if [ $MISSING_DATES -gt 10 ]; then
            echo "::warning::$MISSING_DATES files missing 'Last Updated' date"
          fi

          if [ $ISSUES -gt 0 ]; then
            exit 1
          fi
          echo "✅ Documentation structure validated"

      # ================================================================
      # 3. ENVIRONMENT VARIABLES - Check documentation drift
      # ================================================================
      - name: Check environment variable documentation
        run: |
          echo "🌍 Checking environment variable documentation..."

          if [ -f ".env.example" ] && [ -f "docs/reference/config/ENVIRONMENT.md" ]; then
            # Extract actual env vars
            grep -E "^[A-Z_]+=" .env.example | sed 's/=.*//' | sort > /tmp/env_vars.txt
            ENV_COUNT=$(wc -l < /tmp/env_vars.txt | tr -d ' ')

            # Extract documented vars
            grep -E "^\| [A-Z_]+ \|" docs/reference/config/ENVIRONMENT.md | \
              sed -E 's/^\| ([A-Z_]+) \|.*/\1/' | sort > /tmp/doc_vars.txt
            DOC_COUNT=$(wc -l < /tmp/doc_vars.txt | tr -d ' ')

            # Find undocumented
            UNDOC=$(comm -23 /tmp/env_vars.txt /tmp/doc_vars.txt)
            if [ -n "$UNDOC" ]; then
              echo "::warning::Undocumented environment variables:"
              echo "$UNDOC"
            else
              echo "✅ All $ENV_COUNT environment variables documented"
            fi

            # Find obsolete docs
            OBSOLETE=$(comm -13 /tmp/env_vars.txt /tmp/doc_vars.txt)
            if [ -n "$OBSOLETE" ]; then
              echo "::warning::Documented but not in .env.example:"
              echo "$OBSOLETE"
            fi

            rm -f /tmp/env_vars.txt /tmp/doc_vars.txt
          else
            echo "::warning::Skipping env var check (missing files)"
          fi

      # ================================================================
      # 4. BLOAT DETECTION - Warn about very large files
      # ================================================================
      - name: Check for documentation bloat
        run: |
          echo "📏 Checking for documentation bloat..."

          # Find files >1000 lines
          LARGE_FILES=$(find docs -name "*.md" -type f -exec wc -l {} \; 2>/dev/null | \
            awk '$1 > 1000 {print $1, $2}' | sort -rn)

          if [ -n "$LARGE_FILES" ]; then
            echo "::warning::Large documentation files found (>1000 lines):"
            echo "$LARGE_FILES"
            echo "Consider breaking these into smaller, focused documents"
          else
            echo "✅ No bloated documentation files"
          fi

      # ================================================================
      # 5. SUMMARY
      # ================================================================
      - name: Generate summary
        if: always()
        run: |
          echo "## 📊 Documentation Quality Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Automated validation complete" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Checks Performed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Internal link validation" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Diátaxis structure verification" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Environment variable drift detection" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Documentation bloat detection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Consolidated workflow - single file, no external dependencies*" >> $GITHUB_STEP_SUMMARY
