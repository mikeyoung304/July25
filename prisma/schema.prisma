generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
  schemas   = ["auth", "public"]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String
  auth_code_issued_at    DateTime?             @db.Timestamptz(6)
  saml_relay_states      saml_relay_states[]

  @@index([created_at(sort: Desc)])
  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model identities {
  provider_id     String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @default(dbgenerated("lower((identity_data ->> 'email'::text))"))
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([provider_id, provider], map: "identities_provider_id_provider_unique")
  @@index([email])
  @@index([user_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_challenges {
  id                     String      @id @db.Uuid
  factor_id              String      @db.Uuid
  created_at             DateTime    @db.Timestamptz(6)
  verified_at            DateTime?   @db.Timestamptz(6)
  ip_address             String      @db.Inet
  otp_code               String?
  web_authn_session_data Json?
  mfa_factors            mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")

  @@index([created_at(sort: Desc)], map: "mfa_challenge_created_at_idx")
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model mfa_factors {
  id                   String           @id @db.Uuid
  user_id              String           @db.Uuid
  friendly_name        String?
  factor_type          factor_type
  status               factor_status
  created_at           DateTime         @db.Timestamptz(6)
  updated_at           DateTime         @db.Timestamptz(6)
  secret               String?
  phone                String?
  last_challenged_at   DateTime?        @unique @db.Timestamptz(6)
  web_authn_credential Json?
  web_authn_aaguid     String?          @db.Uuid
  mfa_challenges       mfa_challenges[]
  users                users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, phone], map: "unique_phone_factor_per_user")
  @@index([user_id, created_at], map: "factor_id_created_at_idx")
  @@index([user_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_authorizations {
  id                    String                     @id @db.Uuid
  authorization_id      String                     @unique
  client_id             String                     @db.Uuid
  user_id               String?                    @db.Uuid
  redirect_uri          String
  scope                 String
  state                 String?
  resource              String?
  code_challenge        String?
  code_challenge_method code_challenge_method?
  response_type         oauth_response_type        @default(code)
  status                oauth_authorization_status @default(pending)
  authorization_code    String?                    @unique
  created_at            DateTime                   @default(now()) @db.Timestamptz(6)
  expires_at            DateTime                   @default(dbgenerated("(now() + '00:03:00'::interval)")) @db.Timestamptz(6)
  approved_at           DateTime?                  @db.Timestamptz(6)
  oauth_clients         oauth_clients              @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                 users?                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_clients {
  id                   String                  @id @db.Uuid
  client_secret_hash   String?
  registration_type    oauth_registration_type
  redirect_uris        String
  grant_types          String
  client_name          String?
  client_uri           String?
  logo_uri             String?
  created_at           DateTime                @default(now()) @db.Timestamptz(6)
  updated_at           DateTime                @default(now()) @db.Timestamptz(6)
  deleted_at           DateTime?               @db.Timestamptz(6)
  client_type          oauth_client_type       @default(confidential)
  oauth_authorizations oauth_authorizations[]
  oauth_consents       oauth_consents[]
  sessions             sessions[]

  @@index([deleted_at])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model oauth_consents {
  id            String        @id @db.Uuid
  user_id       String        @db.Uuid
  client_id     String        @db.Uuid
  scopes        String
  granted_at    DateTime      @default(now()) @db.Timestamptz(6)
  revoked_at    DateTime?     @db.Timestamptz(6)
  oauth_clients oauth_clients @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, client_id], map: "oauth_consents_user_client_unique")
  @@index([user_id, granted_at(sort: Desc)], map: "oauth_consents_user_order_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model one_time_tokens {
  id         String              @id @db.Uuid
  user_id    String              @db.Uuid
  token_type one_time_token_type
  token_hash String
  relates_to String
  created_at DateTime            @default(now()) @db.Timestamp(6)
  updated_at DateTime            @default(now()) @db.Timestamp(6)
  users      users               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, token_type])
  @@index([relates_to], map: "one_time_tokens_relates_to_hash_idx", type: Hash)
  @@index([token_hash], map: "one_time_tokens_token_hash_hash_idx", type: Hash)
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([updated_at(sort: Desc)])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  name_id_format    String?
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  flow_state_id   String?       @db.Uuid
  flow_state      flow_state?   @relation(fields: [flow_state_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([created_at(sort: Desc)])
  @@index([for_email])
  @@index([sso_provider_id])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model schema_migrations {
  version String @id @db.VarChar(255)

  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model sessions {
  id              String           @id @db.Uuid
  user_id         String           @db.Uuid
  created_at      DateTime?        @db.Timestamptz(6)
  updated_at      DateTime?        @db.Timestamptz(6)
  factor_id       String?          @db.Uuid
  aal             aal_level?
  not_after       DateTime?        @db.Timestamptz(6)
  refreshed_at    DateTime?        @db.Timestamp(6)
  user_agent      String?
  ip              String?          @db.Inet
  tag             String?
  oauth_client_id String?          @db.Uuid
  mfa_amr_claims  mfa_amr_claims[]
  refresh_tokens  refresh_tokens[]
  oauth_clients   oauth_clients?   @relation(fields: [oauth_client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([not_after(sort: Desc)])
  @@index([oauth_client_id])
  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  disabled          Boolean?
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]

  @@index([resource_id], map: "sso_providers_resource_id_pattern_idx")
  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model users {
  instance_id                 String?                @db.Uuid
  id                          String                 @id @db.Uuid
  aud                         String?                @db.VarChar(255)
  role                        String?                @db.VarChar(255)
  email                       String?                @db.VarChar(255)
  encrypted_password          String?                @db.VarChar(255)
  email_confirmed_at          DateTime?              @db.Timestamptz(6)
  invited_at                  DateTime?              @db.Timestamptz(6)
  confirmation_token          String?                @db.VarChar(255)
  confirmation_sent_at        DateTime?              @db.Timestamptz(6)
  recovery_token              String?                @db.VarChar(255)
  recovery_sent_at            DateTime?              @db.Timestamptz(6)
  email_change_token_new      String?                @db.VarChar(255)
  email_change                String?                @db.VarChar(255)
  email_change_sent_at        DateTime?              @db.Timestamptz(6)
  last_sign_in_at             DateTime?              @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?              @db.Timestamptz(6)
  updated_at                  DateTime?              @db.Timestamptz(6)
  phone                       String?                @unique
  phone_confirmed_at          DateTime?              @db.Timestamptz(6)
  phone_change                String?                @default("")
  phone_change_token          String?                @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?              @db.Timestamptz(6)
  confirmed_at                DateTime?              @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?                @default("") @db.VarChar(255)
  email_change_confirm_status Int?                   @default(0) @db.SmallInt
  banned_until                DateTime?              @db.Timestamptz(6)
  reauthentication_token      String?                @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?              @db.Timestamptz(6)
  is_sso_user                 Boolean                @default(false)
  deleted_at                  DateTime?              @db.Timestamptz(6)
  is_anonymous                Boolean                @default(false)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  oauth_authorizations        oauth_authorizations[]
  oauth_consents              oauth_consents[]
  one_time_tokens             one_time_tokens[]
  sessions                    sessions[]
  payment_audit_logs          payment_audit_logs[]
  user_pins                   user_pins[]            @ignore
  user_profiles               user_profiles?
  user_restaurants            user_restaurants[]

  @@index([instance_id])
  @@index([is_anonymous])
  @@schema("auth")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model api_scopes {
  scope       String        @id
  description String?
  role_scopes role_scopes[]

  @@schema("public")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model menu_categories {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id String       @db.Uuid
  name          String
  slug          String
  description   String?
  display_order Int?         @default(0)
  active        Boolean?     @default(true)
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?    @default(now()) @db.Timestamptz(6)
  restaurants   restaurants  @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  menu_items    menu_items[]

  @@unique([restaurant_id, slug])
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model menu_items {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id     String           @db.Uuid
  category_id       String?          @db.Uuid
  name              String
  description       String?
  price             Decimal          @db.Decimal(10, 2)
  active            Boolean?         @default(true)
  available         Boolean?         @default(true)
  dietary_flags     String[]         @default([])
  modifiers         Json?            @default("[]")
  aliases           String[]         @default([])
  prep_time_minutes Int?             @default(10)
  image_url         String?
  created_at        DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?        @default(now()) @db.Timestamptz(6)
  external_id       String           @unique(map: "menu_items_external_id_unique")
  menu_categories   menu_categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  restaurants       restaurants      @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([category_id], map: "idx_menu_items_category")
  @@index([restaurant_id, active], map: "idx_menu_items_restaurant_active")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model order_status_history {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id      String?      @db.Uuid
  restaurant_id String?      @db.Uuid
  from_status   String?
  to_status     String
  changed_by    String?      @db.Uuid
  changed_at    DateTime?    @default(now()) @db.Timestamptz(6)
  notes         String?
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  orders        orders?      @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([order_id], map: "idx_order_status_history_order")
  @@index([restaurant_id, order_id, changed_at(sort: Desc)], map: "idx_order_status_restaurant_order")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model orders {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id         String                 @db.Uuid
  order_number          String
  type                  String?                @default("kiosk")
  status                String?                @default("pending")
  items                 Json                   @default("[]")
  subtotal              Decimal                @default(0) @db.Decimal(10, 2)
  tax                   Decimal                @default(0) @db.Decimal(10, 2)
  total_amount          Decimal                @default(0) @db.Decimal(10, 2)
  notes                 String?
  customer_name         String?
  table_number          String?
  metadata              Json?                  @default("{}")
  created_at            DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?              @default(now()) @db.Timestamptz(6)
  preparing_at          DateTime?              @db.Timestamptz(6)
  ready_at              DateTime?              @db.Timestamptz(6)
  completed_at          DateTime?              @db.Timestamptz(6)
  cancelled_at          DateTime?              @db.Timestamptz(6)
  scheduled_pickup_time DateTime?              @db.Timestamptz(6)
  auto_fire_time        DateTime?              @db.Timestamptz(6)
  is_scheduled          Boolean?               @default(false)
  manually_fired        Boolean?               @default(false)
  version               Int                    @default(1)
  payment_status        String?                @default("unpaid") @db.VarChar(20)
  payment_method        String?                @db.VarChar(20)
  payment_amount        Decimal?               @db.Decimal(10, 2)
  cash_received         Decimal?               @db.Decimal(10, 2)
  change_given          Decimal?               @db.Decimal(10, 2)
  payment_id            String?                @db.VarChar(255)
  check_closed_at       DateTime?              @db.Timestamp(6)
  closed_by_user_id     String?                @db.Uuid
  seat_number           Int?
  order_status_history  order_status_history[]
  restaurants           restaurants            @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payment_audit_logs    payment_audit_logs[]
  tables                tables[]
  voice_order_logs      voice_order_logs[]

  @@index([created_at(sort: Desc)], map: "idx_orders_created")
  @@index([restaurant_id, order_number], map: "idx_orders_order_number")
  @@index([restaurant_id, created_at(sort: Desc)], map: "idx_orders_restaurant_created")
  @@index([restaurant_id], map: "idx_orders_restaurant_id")
  @@index([restaurant_id, status], map: "idx_orders_restaurant_status")
  @@index([restaurant_id, version], map: "idx_orders_version")
  @@index([check_closed_at], map: "idx_orders_check_closed")
  @@index([payment_status], map: "idx_orders_payment_status")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model restaurants {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  slug                 String                 @unique
  timezone             String?                @default("America/New_York")
  settings             Json?                  @default("{}")
  active               Boolean?               @default(true)
  created_at           DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?              @default(now()) @db.Timestamptz(6)
  tax_rate             Decimal                @default(0.08) @db.Decimal(5, 4)
  menu_categories      menu_categories[]
  menu_items           menu_items[]
  order_status_history order_status_history[]
  orders               orders[]
  station_tokens       station_tokens[]
  tables               tables[]
  user_pins            user_pins[]            @ignore
  user_restaurants     user_restaurants[]
  voice_order_logs     voice_order_logs[]

  @@index([tax_rate], map: "idx_restaurants_tax_rate")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model role_scopes {
  role       String
  scope      String
  api_scopes api_scopes @relation(fields: [scope], references: [scope], onDelete: NoAction, onUpdate: NoAction)

  @@id([role, scope])
  @@index([role], map: "idx_role_scopes_role")
  @@index([scope], map: "idx_role_scopes_scope")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model station_tokens {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id String      @db.Uuid
  station_type  String
  label         String?
  created_at    DateTime?   @default(now()) @db.Timestamptz(6)
  restaurants   restaurants @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([restaurant_id], map: "idx_station_tokens_restaurant_id")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model tables {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id    String      @db.Uuid
  created_at       DateTime    @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?   @db.Timestamptz(6)
  label            String
  seats            Int         @default(2)
  x_pos            Decimal     @default(0) @db.Decimal
  y_pos            Decimal     @default(0) @db.Decimal
  width            Decimal     @default(100) @db.Decimal
  height           Decimal     @default(100) @db.Decimal
  rotation         Int         @default(0)
  shape            String      @default("rectangle")
  status           String      @default("available")
  current_order_id String?     @db.Uuid
  active           Boolean     @default(true)
  z_index          Int?        @default(1)
  orders           orders?     @relation(fields: [current_order_id], references: [id], onUpdate: NoAction)
  restaurants      restaurants @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([restaurant_id, status], map: "idx_tables_restaurant_status")
  @@schema("public")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_pins {
  user_id       String?      @db.Uuid
  restaurant_id String?      @db.Uuid
  pin           String
  restaurants   restaurants? @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([restaurant_id, user_id], map: "user_pins_restaurant_user_unique")
  @@unique([user_id, restaurant_id])
  @@index([restaurant_id], map: "idx_user_pins_restaurant_id")
  @@index([restaurant_id, user_id], map: "idx_user_pins_restaurant_user")
  @@ignore
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_profiles {
  user_id      String    @id @db.Uuid
  display_name String?
  phone        String?
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_restaurants {
  user_id       String      @db.Uuid
  restaurant_id String      @db.Uuid
  role          String
  is_active     Boolean?    @default(true)
  restaurants   restaurants @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, restaurant_id])
  @@index([restaurant_id], map: "idx_user_restaurants_restaurant_id")
  @@schema("public")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model voice_order_logs {
  id               String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurant_id    String      @db.Uuid
  order_id         String?     @db.Uuid
  transcription    String
  parsed_items     Json?
  confidence_score Decimal?    @db.Decimal(3, 2)
  success          Boolean?    @default(true)
  error_message    String?
  audio_url        String?
  device_id        String?
  created_at       DateTime?   @default(now()) @db.Timestamptz(6)
  orders           orders?     @relation(fields: [order_id], references: [id], onUpdate: NoAction)
  restaurants      restaurants @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([restaurant_id, created_at(sort: Desc)], map: "idx_voice_logs_restaurant")
  @@index([restaurant_id, created_at(sort: Desc)], map: "idx_voice_logs_restaurant_created")
  @@schema("public")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model payment_audit_logs {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_id        String?   @db.Uuid
  user_id         String?   @db.Uuid
  restaurant_id   String    @db.Uuid
  amount          Int
  payment_method  String
  payment_id      String?
  status          String
  error_code      String?
  error_detail    String?
  ip_address      String?   @db.Inet
  user_agent      String?
  idempotency_key String?   @unique
  metadata        Json?     @default("{}")
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  orders          orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "idx_payment_audit_logs_created_at")
  @@index([idempotency_key], map: "idx_payment_audit_logs_idempotency_key")
  @@index([order_id], map: "idx_payment_audit_logs_order_id")
  @@index([payment_id], map: "idx_payment_audit_logs_payment_id")
  @@index([restaurant_id, created_at(sort: Desc)], map: "idx_payment_audit_logs_restaurant_created")
  @@index([restaurant_id], map: "idx_payment_audit_logs_restaurant_id")
  @@index([restaurant_id, status], map: "idx_payment_audit_logs_restaurant_status")
  @@index([status], map: "idx_payment_audit_logs_status")
  @@index([user_id], map: "idx_payment_audit_logs_user_id")
  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum code_challenge_method {
  s256
  plain

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn
  phone

  @@schema("auth")
}

enum oauth_authorization_status {
  pending
  approved
  denied
  expired

  @@schema("auth")
}

enum oauth_client_type {
  public
  confidential

  @@schema("auth")
}

enum oauth_registration_type {
  dynamic
  manual

  @@schema("auth")
}

enum oauth_response_type {
  code

  @@schema("auth")
}

enum one_time_token_type {
  confirmation_token
  reauthentication_token
  recovery_token
  email_change_token_new
  email_change_token_current
  phone_change_token

  @@schema("auth")
}
